<?xml version="1.0"?>

<project name="FusionDirectorAdapter" default="all">

   <!-- property file="build.properties" / -->
<property name="root.base" location="../../" />    
   <property name="dirs.base" location="." />
   <property name="dirs.src" location="${dirs.base}/src" />
   <property name="dirs.lib" location="${root.base}/third_party/plugin-lib" />
   <property name="self.lib" location="${root.base}/src_bin" />
   <property name="dirs.base.lib" location="../../third_party/management-pack-lib" />
   <property name="dirs.conf" location="${dirs.base}/conf" />
   <property name="dirs.build" location="${dirs.base}/build" />
   <property name="dirs.compiled" location="${dirs.build}/classes" />
   <property name="dirs.deploy" location="${dirs.build}/deploy" />
   <property name="build.directory" value="FusionDirectorAdapter" />
   <property name="build.jarfile" value="${build.directory}.jar" />
   <property name="adapter.name" value="FusionDirectorAdapter" />
   <property name="pakFileName" value="FusionDirectorAdapter" />
   <property name="resources.properties" location="${dirs.base}/conf/resources/resources.properties" />

    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${dirs.base.lib}/ant-contrib-1.0b3.jar" />
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"    classpath="${dirs.base.lib}/xmltask.jar"/>    

   <!-- Define the classpath -->
   <path id="class.path">
      <pathelement path="${class.path.extras}" />
      <fileset dir="${dirs.lib}" includes="*.jar" erroronmissingdir="false" />
   </path>

   <target name="init" depends="validate-describe-xsd" description="Initialize necessary environment for other tasks">
      <!-- Loads adapter.xml for filling MANIFEST.MF file of adapter jar -->
      <xmlproperty file="adapter.xml" />
      <!-- Parse version from adapter.xml for filling major and minor versions -->
      <propertyregex property="adapter.majorVersion" input="${adapter.version}" regexp="(.*)\.(.*)\.(.*)" select="\1" />
      <propertyregex property="adapter.minorVersion" input="${adapter.version}" regexp="(.*)\.(.*)\.(.*)" select="\2" />
      <propertyregex property="adapter.implementationVersion" input="${adapter.version}" regexp="(.*)\.(.*)\.(.*)" select="\3" />
   	
   	  <delete dir="${dirs.build}"/>

      <mkdir dir="${dirs.build}" />
      <mkdir dir="${dirs.compiled}" />
      <mkdir dir="${dirs.deploy}" />
   </target>

   <!-- Validate describe.xml using describe.xsd file -->
   <target name="validate-describe-xsd" description="Validate describe.xml using describeSchema.xsd file">
      <schemavalidate file="${dirs.conf}/describe.xml" />
   </target>

   <!-- Compile Java Files and store in /build/classes directory -->
   <target name="build.compile" depends="init" description="Compile all sources">
      <javac srcdir="${dirs.src}" destdir="${dirs.compiled}" debug="true" includes="**/*.java" classpathref="class.path" source="1.7" target="1.7" failonerror="true" includeantruntime="false"/>
      <!-- Create adapter.properties in classes folder using adapter.xml data -->
      <propertyfile file="${dirs.compiled}/adapter.properties">
         <entry key="ENTRYCLASS" value="${adapter.entryClass}" />
         <entry key="KINDKEY" value="${adapter.adapterType.key}" />
      </propertyfile>
      <copy todir="${dirs.compiled}">
         <fileset dir="${dirs.src}" excludes="**/*.java" />
      </copy>
   </target>

   <target name="build.jar" depends="build.compile">
      <delete file="${dirs.deploy}/${build.jarfile}" />
      <jar destfile="${dirs.deploy}/${build.jarfile}">
         <fileset dir="${dirs.compiled}">
            <include name="**/*.class" />
            <include name="**/adapter.properties" />
            <exclude name="*/test/**" />
         </fileset>
         <fileset dir="${dirs.src}">
            <include name="**/describe.xml" />
         </fileset>
         <manifest>
            <attribute name="Adapter-Entry-Class" value="${adapter.entryClass}" />
            <attribute name="Adapter-Kind" value="${adapter.adapterType.key}" />
            <attribute name="Adapter-Major-Version" value="${adapter.majorVersion}" />
            <attribute name="Adapter-Minor-Version" value="${adapter.minorVersion}" />
            <attribute name="Adapter-Version" value="${adapter.implementationVersion}" />
         </manifest>
      </jar>
   </target>

   <target name="build.deploy" depends="build.jar">
      <delete dir="${dirs.deploy}/${build.directory}" />
      <copy todir="${dirs.deploy}/${build.directory}/lib/" failonerror="false">
         <fileset dir="${dirs.lib}">
            <include name="**/*" />
            <exclude name="empty.txt" />
            <exclude name="alive_common.jar" />
         </fileset>
      </copy>
      <copy todir="${dirs.deploy}/${build.directory}/conf/" failonerror="false">
         <fileset dir="${dirs.conf}">
            <include name="**/*" />
            <exclude name="empty.txt" />
         </fileset>
      </copy>

      <copy file="${resources.properties}" tofile="${dirs.deploy}/${build.directory}/conf/resources/resources_en.properties" />
<!--
      <copy todir="${dirs.deploy}/${build.directory}/work/" failonerror="false">
         <fileset dir="${dirs.base}/work">
            <include name="**/*" />
            <exclude name="empty.txt" />
         </fileset>
      </copy>
      <copy todir="${dirs.deploy}/${build.directory}/doc" failonerror="false">
         <fileset dir="${dirs.base}/doc" includes="**/*" />
      </copy>
-->
      <!-- Create version.txt in conf folder using adapter.xml data -->
      <propertyfile file="${dirs.deploy}/${build.directory}/conf/version.txt">
         <entry key="Major-Version" value="${adapter.majorVersion}" />
         <entry key="Minor-Version" value="${adapter.minorVersion}" />
         <entry key="Implementation-Version" value="${adapter.implementationVersion}" />
         <entry key="Vcops_Minimum_Version" value="${adapter.minimumProductVersion}" />
      </propertyfile>

   </target>

   <target name="build.pak" depends="build.deploy">
      <ant antfile="../../tools/PakFileBuilder/conf/pak-build.xml" target="build.pak">
         <property name="dirs.tool.base" value="../../tools/PakFileBuilder" />
         <property name="dirs.eula-icon-resource.files" value="${dirs.base}" />
         <property name="dirs.pkg" value="pkg" />
         <property name="dirs.dest" value="build/deploy" />
         <property name="ADAPTERS_LOCATION" value="build/deploy" />
         <property name="PAKFILE_NAME" value="${pakFileName}" />
         <property name="PAKFILE_VERSION" value="1.0.0" />
         <property name="adapter.kinds" value='"FusionDirectorAdapter"' />
      </ant>
   </target>

   <!-- Clean the build directory -->
   <target name="clean.build" description="Clean build files">
      <mkdir dir="${dirs.build}" />
      <delete includeemptydirs="true">
         <fileset dir="${dirs.build}" includes="**/*" />
      </delete>
      <delete dir="${dirs.build}" />
   </target>

   <!-- Clean the deploy directory -->
   <target name="clean.deploy" description="Clean deploy files">
      <mkdir dir="${dirs.deploy}" />
      <delete includeemptydirs="true">
         <fileset dir="${dirs.deploy}" includes="**/*" />
      </delete>
   </target>

   <!-- Clean the classes directory -->
   <target name="clean.compiled" description="Clean compiled files">
      <mkdir dir="${dirs.compiled}" />
      <delete includeemptydirs="true">
         <fileset dir="${dirs.compiled}" includes="**/*" />
      </delete>
   </target>
   <target name="clean.all" depends="clean.build,clean.compiled,clean.deploy" />

   <target name="all" depends="init,build.compile,build.jar,build.deploy" />

</project>
